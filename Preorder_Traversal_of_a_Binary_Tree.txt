//     4
//    / \
//   5   8
//  / \ / \
// 1  2 9  3

// This how are Binary Tree looks like.
//LETS START OUR CODE!

#include<stdio.h>

//Creating the structure of each node of the the binary tree
struct treenode
{
    int data;
    struct treenode *left;
    struct treenode *right;
};

//Creating a function to create the nodes of the tree
// struct treenode* is used in create function because it will return struct treenode pointer
struct treenode* create(int x)
{
    struct treenode *newnode;
    newnode=(struct treenode*)malloc(sizeof(struct treenode));
    newnode->data=x;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode; //it is returning the pointer of struct treenode
}

//Creating a function to print our Binary Tree
void printing(struct treenode *root)
{
    if (root!=NULL)
    {
        printf("%d",root->data);
        printing(root->left);
        printing(root->right);
    }
}

void main()
{
    //Creating 7 nodes for our Binary Tree
    struct treenode *p0=create(4);
    struct treenode *p1=create(5);
    struct treenode *p2=create(8);
    struct treenode *p3=create(1);
    struct treenode *p4=create(2);
    struct treenode *p5=create(9);
    struct treenode *p6=create(3);


//Our Binary Tree looks like this!

//     4
//    / \
//   5   8
//  / \ / \
// 1  2 9  3

    //Linking the nodes of the tree
    p0->left=p1;
    p0->right=p2;
    p1->left=p3;
    p1->right=p4;
    p2->left=p5;
    p2->right=p6;
    p3->left=NULL;
    p3->right=NULL;

     p4->left=NULL;
    p4->right=NULL;
     p5->left=NULL;
    p5->right=NULL;
     p6->left=NULL;
    p6->right=NULL;

    // calling printing function to print our Binary Tree
    printing(p0);



}

