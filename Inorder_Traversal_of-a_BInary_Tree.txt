//     4
//    / \
//   5   8
//  / \ / \
// 1  2 9  3

// This how are Binary Tree looks like.
//LETS START OUR CODE of Inorder Traversal of Binary Tree!

//left subtree--> right subtree--> root(logic of postorder(CodeWithHenry))

#include<stdio.h>

//making the structure of the node of a Binary Tree

struct treenode
{
    int data;
    struct treenode *left;
    struct treenode *right;
};

//Making a function to create the nodes of the the Binary Tree

//struct treenode* is used because it is going to return the pointer of struct treenode

struct treenode *create(int x)
{
 struct treenode *newnode;
 newnode=(struct treenode*)malloc(sizeof(struct treenode));
 newnode->data=x;
 newnode->left=NULL;
 newnode->right=NULL;
}

//Creating a function to print Binary Tree in postorder Traversal form
void printing(struct treenode *root)
{
    if(root!=NULL)
    {
        printing(root->left);
        printf("%d",root->data);
        printing(root->right);

    }
}

void main()
{
    //Creating 7 nodes for our Binary Tree
    struct treenode *p0=create(4);
    struct treenode *p1=create(5);
    struct treenode *p2=create(8);
    struct treenode *p3=create(1);
    struct treenode *p4=create(2);
    struct treenode *p5=create(9);
    struct treenode *p6=create(3);


//Our Binary Tree looks like this!

//     4
//    / \
//   5   8
//  / \ / \
// 1  2 9  3

    //Linking the nodes of the tree
    p0->left=p1;
    p0->right=p2;
    p1->left=p3;
    p1->right=p4;
    p2->left=p5;
    p2->right=p6;
    p3->left=NULL;
    p3->right=NULL;

     p4->left=NULL;
    p4->right=NULL;
     p5->left=NULL;
    p5->right=NULL;
     p6->left=NULL;
    p6->right=NULL;

    // calling printing function to print our Binary Tree
    printing(p0);
}



